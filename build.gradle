// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0')
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
}

apply plugin: 'io.codearte.nexus-staging'

description = 'tally client'

// Remove default (empty) artifact
configurations.archives.artifacts.clear()

allprojects {
    group = 'com.uber.m3'
    version = '0.1.1'

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile('junit:junit:4.12')
    }

    ext.ossrhUsername = System.getenv('OSSRH_JIRA_USERNAME')
    ext.ossrhPassword = System.getenv('OSSRH_JIRA_PASSWORD')
    ext."signing.keyId" = System.getenv('GPG_KEY_ID')
    ext."signing.password" = System.getenv('GPG_PASSPHRASE')
    ext."secretKeyRingFileName" = 'signing.gpg'

    if (ext."signing.keyId" && ext."signing.password" && ossrhUsername && ossrhPassword) {
        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    uniqueVersion = false

                    beforeDeployment {
                        MavenDeployment deployment -> signing.signPom(deployment)
                    }
                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name project.getPath()
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/uber-java/tally'

                        scm {
                            connection 'scm:git:https://github.com/uber-java/tally.git'
                            developerConnection 'scm:git:https://github.com/uber-java/tally.git'
                            url 'https://github.com/your/project.git'
                        }

                        licenses {
                            license {
                                name 'The MIT License (MIT)'
                                url 'https://github.com/uber-java/tally/blob/master/LICENSE.md'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'juchan'
                                name = 'Justin Chan'
                                email = 'juchan@uber.com'
                            }
                        }
                    }

                }
            }
        }
    }
}

subprojects {
    apply plugin: 'checkstyle'

    checkstyle {
        configFile = file('../checkstyles/uber_checks.xml')
        // Latest Checkstyle version that supports JRE7
        toolVersion = '6.19'
    }

    checkstyleMain.exclude '**/generated/**/*'

    ext."signing.secretKeyRingFile" = "../ci/${ext.secretKeyRingFileName}"

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    jacocoTestReport.reports.xml.enabled = true
    test.finalizedBy jacocoTestReport
}

ext."signing.secretKeyRingFile" = "ci/${ext.secretKeyRingFileName}"

task wrapper(type: Wrapper) {
    // Gradle version 4+ required for JMH benchmarking, otherwise v3.5+ is sufficient
    gradleVersion = '4.0'
}

// --------------------------------------
// Testing and coverage for whole project
// --------------------------------------
coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output.classesDirs)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

test.finalizedBy jacocoRootReport

// Create javadoc containing all subprojects for full online documentation
test.finalizedBy tasks.create([
    name: 'masterJavaDoc',
    type: Javadoc,
    dependsOn: subprojects.collect{it.getName() + ':classes'}
]) {
    classpath = files(subprojects.collect{ it.sourceSets.main.compileClasspath })
    source = subprojects.collect{ it.sourceSets.main.allJava }
}
