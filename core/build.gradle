// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

description = 'Interfaces and utilities to report metrics to M3'
apply from: 'jmhFixtures.gradle'

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']

        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
    }
}

task runJmhTests(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
    def resultFilePath = project.properties.get('output', 'benchmark-tests.txt')
    def resultFile = file(resultFilePath)
    resultFile.parentFile.mkdirs()

    args '-rf', 'text'
    args '-rff', resultFile

    // Profile using GC, Threading profilers
    if (project.properties.get('busegc', 'true') == 'true') {
        args '-prof', 'gc'
        args '-prof', 'hs_thr'

        // Force GC after every iterations, to make sure that one iteration
        // doesn't affect the other one
        args '-gc', 'true'
    }


    // Profile using async-profiling
    //
    // NOTE: For this to work you need to make sure that async-profiler's library is either
    //          - Available in LD_LIBRARY_PATH (Linux), DYLD_LIBRARY_PATH (Mac)
    //          - Available in '-Djava.library.path'
    //          - Explicitly specify pprof arg with 'async:libPath=</path/libasyncProfiler.so>'
    args '-prof', project.properties.get('bprof', 'async:event=cpu;direction=forward;output=flamegraph')

    args '-bm', project.properties.get('bm', 'thrpt')
    args '-t', project.properties.get('bthreads', '1')
    args 'com.uber.m3.tally.' + project.properties.get('benchclass', '')
}

classes.finalizedBy(jmhClasses)
