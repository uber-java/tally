// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

plugins {
    id "org.jruyi.thrift" version "0.4.0"
}

description = 'tally M3 reporter'

dependencies {
    compile('org.apache.thrift:libthrift:0.9.3')
    compile project(path: ':tally-core', configuration: 'jmhFixturesUsageCompile')
}

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
    }
}

task runJmhTests(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
    def resultFilePath = project.properties.get('output', 'benchmark-tests.txt')
    def resultFile = file(resultFilePath)
    resultFile.parentFile.mkdirs()

    // ScopeImplBenchmark is shipped as a part of jmh source-set from :tally-core. Explicitly exclude it from running.
    args '-e', '.*ScopeImplBenchmark.*'
    args '-rf', 'text'
    args '-rff', resultFile
    args '-prof', 'gc'
}

classes.finalizedBy(jmhClasses)

compileThrift {
    generator 'java', 'private-members'

    outputDir "${projectDir}/src/generated/java"

    createGenFolder false

    onlyIf {
        project.hasProperty('genThrift')
    }
}
