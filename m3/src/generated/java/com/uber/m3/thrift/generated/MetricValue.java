/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.uber.m3.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Different types of values that m3 emits. Each metric
 * must contain one of these values
 */
public class MetricValue implements org.apache.thrift.TBase<MetricValue, MetricValue._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetricValue");

  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField GAUGE_FIELD_DESC = new org.apache.thrift.protocol.TField("gauge", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TIMER_FIELD_DESC = new org.apache.thrift.protocol.TField("timer", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricValueTupleSchemeFactory());
  }

  public CountValue count; // optional
  public GaugeValue gauge; // optional
  public TimerValue timer; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNT((short)1, "count"),
    GAUGE((short)2, "gauge"),
    TIMER((short)3, "timer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNT
          return COUNT;
        case 2: // GAUGE
          return GAUGE;
        case 3: // TIMER
          return TIMER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.COUNT,_Fields.GAUGE,_Fields.TIMER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CountValue.class)));
    tmpMap.put(_Fields.GAUGE, new org.apache.thrift.meta_data.FieldMetaData("gauge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GaugeValue.class)));
    tmpMap.put(_Fields.TIMER, new org.apache.thrift.meta_data.FieldMetaData("timer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimerValue.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetricValue.class, metaDataMap);
  }

  public MetricValue() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetricValue(MetricValue other) {
    if (other.isSetCount()) {
      this.count = new CountValue(other.count);
    }
    if (other.isSetGauge()) {
      this.gauge = new GaugeValue(other.gauge);
    }
    if (other.isSetTimer()) {
      this.timer = new TimerValue(other.timer);
    }
  }

  public MetricValue deepCopy() {
    return new MetricValue(this);
  }

  @Override
  public void clear() {
    this.count = null;
    this.gauge = null;
    this.timer = null;
  }

  public CountValue getCount() {
    return this.count;
  }

  public MetricValue setCount(CountValue count) {
    this.count = count;
    return this;
  }

  public void unsetCount() {
    this.count = null;
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return this.count != null;
  }

  public void setCountIsSet(boolean value) {
    if (!value) {
      this.count = null;
    }
  }

  public GaugeValue getGauge() {
    return this.gauge;
  }

  public MetricValue setGauge(GaugeValue gauge) {
    this.gauge = gauge;
    return this;
  }

  public void unsetGauge() {
    this.gauge = null;
  }

  /** Returns true if field gauge is set (has been assigned a value) and false otherwise */
  public boolean isSetGauge() {
    return this.gauge != null;
  }

  public void setGaugeIsSet(boolean value) {
    if (!value) {
      this.gauge = null;
    }
  }

  public TimerValue getTimer() {
    return this.timer;
  }

  public MetricValue setTimer(TimerValue timer) {
    this.timer = timer;
    return this;
  }

  public void unsetTimer() {
    this.timer = null;
  }

  /** Returns true if field timer is set (has been assigned a value) and false otherwise */
  public boolean isSetTimer() {
    return this.timer != null;
  }

  public void setTimerIsSet(boolean value) {
    if (!value) {
      this.timer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((CountValue)value);
      }
      break;

    case GAUGE:
      if (value == null) {
        unsetGauge();
      } else {
        setGauge((GaugeValue)value);
      }
      break;

    case TIMER:
      if (value == null) {
        unsetTimer();
      } else {
        setTimer((TimerValue)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNT:
      return getCount();

    case GAUGE:
      return getGauge();

    case TIMER:
      return getTimer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNT:
      return isSetCount();
    case GAUGE:
      return isSetGauge();
    case TIMER:
      return isSetTimer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetricValue)
      return this.equals((MetricValue)that);
    return false;
  }

  public boolean equals(MetricValue that) {
    if (that == null)
      return false;

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (!this.count.equals(that.count))
        return false;
    }

    boolean this_present_gauge = true && this.isSetGauge();
    boolean that_present_gauge = true && that.isSetGauge();
    if (this_present_gauge || that_present_gauge) {
      if (!(this_present_gauge && that_present_gauge))
        return false;
      if (!this.gauge.equals(that.gauge))
        return false;
    }

    boolean this_present_timer = true && this.isSetTimer();
    boolean that_present_timer = true && that.isSetTimer();
    if (this_present_timer || that_present_timer) {
      if (!(this_present_timer && that_present_timer))
        return false;
      if (!this.timer.equals(that.timer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MetricValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MetricValue typedOther = (MetricValue)other;

    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGauge()).compareTo(typedOther.isSetGauge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGauge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gauge, typedOther.gauge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimer()).compareTo(typedOther.isSetTimer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timer, typedOther.timer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetricValue(");
    boolean first = true;

    if (isSetCount()) {
      sb.append("count:");
      if (this.count == null) {
        sb.append("null");
      } else {
        sb.append(this.count);
      }
      first = false;
    }
    if (isSetGauge()) {
      if (!first) sb.append(", ");
      sb.append("gauge:");
      if (this.gauge == null) {
        sb.append("null");
      } else {
        sb.append(this.gauge);
      }
      first = false;
    }
    if (isSetTimer()) {
      if (!first) sb.append(", ");
      sb.append("timer:");
      if (this.timer == null) {
        sb.append("null");
      } else {
        sb.append(this.timer);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (count != null) {
      count.validate();
    }
    if (gauge != null) {
      gauge.validate();
    }
    if (timer != null) {
      timer.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricValueStandardSchemeFactory implements SchemeFactory {
    public MetricValueStandardScheme getScheme() {
      return new MetricValueStandardScheme();
    }
  }

  private static class MetricValueStandardScheme extends StandardScheme<MetricValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetricValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.count = new CountValue();
              struct.count.read(iprot);
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAUGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gauge = new GaugeValue();
              struct.gauge.read(iprot);
              struct.setGaugeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timer = new TimerValue();
              struct.timer.read(iprot);
              struct.setTimerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetricValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.count != null) {
        if (struct.isSetCount()) {
          oprot.writeFieldBegin(COUNT_FIELD_DESC);
          struct.count.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gauge != null) {
        if (struct.isSetGauge()) {
          oprot.writeFieldBegin(GAUGE_FIELD_DESC);
          struct.gauge.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timer != null) {
        if (struct.isSetTimer()) {
          oprot.writeFieldBegin(TIMER_FIELD_DESC);
          struct.timer.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricValueTupleSchemeFactory implements SchemeFactory {
    public MetricValueTupleScheme getScheme() {
      return new MetricValueTupleScheme();
    }
  }

  private static class MetricValueTupleScheme extends TupleScheme<MetricValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetricValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCount()) {
        optionals.set(0);
      }
      if (struct.isSetGauge()) {
        optionals.set(1);
      }
      if (struct.isSetTimer()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCount()) {
        struct.count.write(oprot);
      }
      if (struct.isSetGauge()) {
        struct.gauge.write(oprot);
      }
      if (struct.isSetTimer()) {
        struct.timer.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetricValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.count = new CountValue();
        struct.count.read(iprot);
        struct.setCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gauge = new GaugeValue();
        struct.gauge.read(iprot);
        struct.setGaugeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timer = new TimerValue();
        struct.timer.read(iprot);
        struct.setTimerIsSet(true);
      }
    }
  }

}

